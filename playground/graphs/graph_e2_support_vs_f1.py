#  Daten wurden aus dem Classification Report des e2 genommen (alle Klassen mit f1 != 0.0000)
#  auf dem 1000k Datensatz mit 80% train und 10% test

import matplotlib.pyplot as plt
from playground.graphs.colors import Colors

c = Colors()

data = [
    ('Düsseldorf', 0.4511, 2983),
    ('Oberding', 0.5789, 162),
    ('Leipzig', 0.4082, 1527),
    ('Neunkirchen', 0.0108, 185),
    ('Willich', 0.0238, 83),
    ('Bremerhaven', 0.0157, 379),
    ('Hof', 0.2500, 70),
    ('Bielefeld', 0.3276, 530),
    ('Hamm', 0.2340, 166),
    ('Schifferstadt', 0.0251, 236),
    ('Garmisch-Partenkirchen', 0.2917, 41),
    ('Buxtehude', 0.6667, 76),
    ('Landsberg', 0.2609, 20),
    ('Bergkamen', 0.6154, 9),
    ('Köln', 0.3311, 3939),
    ('Heppenheim (Bergstraße)', 0.2308, 91),
    ('Recklinghausen', 0.1386, 94),
    ('Wuppertal', 0.4831, 291),
    ('Bochum', 0.3115, 515),
    ('Friedberg', 0.1250, 15),
    ('Zwickau', 0.1176, 32),
    ('Karlsruhe', 0.0290, 476),
    ('Darmstadt', 0.0058, 343),
    ('Heidelberg', 0.0293, 202),
    ('Troisdorf', 0.0167, 119),
    ('Buchholz (Westerwald)', 0.0088, 225),
    ('Aachen', 0.0816, 563),
    ('Husum', 0.1026, 37),
    ('Leubnitz', 0.0851, 45),
    ('Münster', 0.0096, 413),
    ('Frankfurt am Main', 0.6275, 5299),
    ('Mainz', 0.0344, 513),
    ('Mönchengladbach', 0.0312, 189),
    ('Haßfurt', 0.0198, 100),
    ('Bonn', 0.1647, 1246),
    ('other', 0.3212, 9940),
    ('Karlsdorf-Neuthard', 0.9977, 444),
    ('Ottersberg', 0.8000, 9),
    ('Lübeck', 0.0269, 220),
    ('Erlangen', 0.0056, 358),
    ('Heidesee', 0.5111, 125),
    ('Duisburg', 0.1902, 666),
    ('Kenz-Küstrow', 0.0144, 138),
    ('Maroth', 0.0580, 66),
    ('Potsdam', 0.9098, 2263),
    ('Göttingen', 0.3606, 585),
    ('Braunschweig', 0.0058, 343),
    ('Bremen', 0.2562, 800),
    ('Bad Neuenahr-Ahrweiler', 0.0556, 35),
    ('Oldenburg (Oldenburg)', 0.0114, 350),
    ('Marburg', 0.0638, 91),
    ('Hürth', 0.0274, 71),
    ('Leinfelden-Echterdingen', 0.2000, 90),
    ('München', 0.5191, 3195),
    ('Rostock', 0.0136, 293),
    ('Offenburg', 0.0519, 75),
    ('Dresden', 0.2488, 703),
    ('Rothenburg ob der Tauber', 0.2222, 8),
    ('Regensburg', 0.0159, 245),
    ('Offenbach am Main', 0.0326, 181),
    ('Dortmund', 0.1505, 1418),
    ('Weingarten (Baden)', 0.7778, 99),
    ('Bayreuth', 0.7424, 144),
    ('Schweinfurt', 0.0345, 57),
    ('Mannheim', 0.0541, 392),
    ('Rheda-Wiedenbrück', 0.1333, 14),
    ('Dinslaken', 0.0370, 53),
    ('Bentwisch', 0.0190, 104),
    ('Varel', 0.1212, 31),
    ('Amberg', 0.5763, 42),
    ('Einbeck', 0.6984, 41),
    ('Pommersfelden', 0.1579, 35),
    ('Wolfsburg', 0.0656, 177),
    ('Berlin', 0.3503, 14909),
    ('Saarbrücken', 0.1101, 326),
    ('Leipzig', 0.1467, 233),
    ('Delligsen', 0.9793, 74),
    ('Fürth', 0.0102, 389),
    ('Boppard', 0.5532, 68),
    ('Höchst im Odenwald', 0.0265, 149),
    ('Erfurt', 0.0063, 315),
    ('Königstein im Taunus', 0.0952, 20),
    ('Koblenz', 0.3386, 443),
    ('Stuttgart', 0.4122, 1663),
    ('Wiesbaden', 0.3312, 658),
    ('Geretsried', 0.3478, 76),
    ('Ludwigshafen am Rhein', 0.2727, 133),
    ('Essen', 0.3211, 677),
    ('Simmelsdorf', 0.5758, 40),
    ('Hannover', 0.1980, 1459),
    ('Söhrewald', 0.8837, 168),
    ('Willebadessen', 1.0000, 66),
    ('Ahrensburg', 0.7013, 50),
    ('Siefersheim', 0.5000, 15),
    ('Paderborn', 0.0128, 154),
    ('Plauen', 0.0290, 133),
    ('Hamburg', 0.3861, 5822),
    ('Würzburg', 0.1148, 312),
    ('Sylt', 0.2807, 49),
    ('Nürnberg', 0.3068, 585),
    ('Rottweil', 0.1837, 89),
    ('Burbach', 0.0303, 65),
    ('Solingen', 0.0282, 139),
    ('Freiburg im Breisgau', 0.0086, 232),
    ('Kronberg im Taunus', 0.0769, 50),
    ('Jülich', 0.1772, 72)
]

labels = [x[0] for x in data]
f_score = [x[1] for x in data]
support = [x[2] for x in data]
plt.scatter(support, f_score, c=c.qualitative[0], s=100, alpha=0.5)
# plt.gca().set_xscale('log')
plt.gca().set_xlabel("support")
plt.gca().set_ylabel("f1 score")
for i, label in enumerate(labels):
    if f_score[i] > 0.3 and support[i] > 1500:
        plt.annotate(s=label, xy=(support[i], f_score[i]), xytext=(support[i] + 250, f_score[i]))

plt.show()
